plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'com.rc.ciardo_roberto_gametech_challenge_android'
    compileSdk 34

    defaultConfig {
        applicationId "com.rc.ciardo_roberto_gametech_challenge_android"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}

tasks.register("copyAarToUnity") {
    dependsOn("assembleDebug")

    doLast {
        def aarSource = file("C:/Users/Roberto/Desktop/MiniclipChallengeRepo/ciardo_roberto_gametech-challenge-android/ciardo_roberto_gametech-challenge-android/build/outputs/aar/ciardo_roberto_gametech-challenge-android-debug.aar")
        def unityDestinationDir = file("C:/Users/Roberto/Desktop/MiniclipChallengeRepo/ciardo_roberto_gametech-challenge-unity/Assets/Plugins/Android")

        if (aarSource.exists()) {
            if (!unityDestinationDir.exists()) {
                unityDestinationDir.mkdirs()
            }

            def destinationFile = new File(unityDestinationDir, aarSource.name)
            aarSource.withInputStream { input ->
                destinationFile.withOutputStream { output ->
                    output << input
                }
            }

            println(".aar file successfully copied to ${destinationFile}")
        } else {
            println(".aar file not found: ${aarSource}")
        }
    }
}

tasks.named("build") {
    finalizedBy("copyAarToUnity")
}